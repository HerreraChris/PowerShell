## Execution Start-Time
$ET_start = (Get-Date) 

# Create an array of computers to do work against
$Computers = Get-content E:\CONCRIH\OP-Scan-Domain\list.txt

# Create an empty array that we'll use later
$RunspaceCollection = @()

# This is the array we want to ultimately add our information to
$qwinstaResults = [System.Collections.ArrayList]::Synchronized((New-Object System.Collections.ArrayList))

# Create a Runspace Pool with a minimum and maximum number of run spaces.
$RunspacePool = [RunspaceFactory]::CreateRunspacePool(1,150)

# Open the RunspacePool so we can use it
$RunspacePool.Open()

# Define a script block to actually do the work
$ScriptBlock = {
	Param([string]$Computer, $qwinstaResults)
    INSERT A FUNCTION HERE IF THE CODE BELOW IS GOING TO USE IT
    EXAMPLE

	$queryResults = @{
               INSERT COE WHICH DOES WORK HERE
               EXAMPLE Get-Service -Computer XYZ
                 }
    [System.Threading.Monitor]::Enter($qwinstaResults.syncroot)
    [void]$qwinstaResults.Add($queryResults)
    [System.Threading.Monitor]::Exit($qwinstaResults.syncroot)
} #/ScriptBlock

# Create PowerShell objects, then for each one add the unique computer name.
Foreach ($Computer in $Computers) {
	# Create a PowerShell object to run add the script and argument.
	# We first create a Powershell object to use, and simualtaneously add our script block we made earlier, and add our arguement that we created earlier
	$Powershell = [PowerShell]::Create().AddScript($ScriptBlock).AddArgument($Computer).AddArgument($qwinstaResults)
    

	# Specify runspace to use
	# This is what let's us run concurrent and simualtaneous sessions
	$Powershell.RunspacePool = $RunspacePool

	# Create Runspace collection
	# When we create the collection, we also define that each Runspace should begin running
	[Collections.Arraylist]$RunspaceCollection += New-Object -TypeName PSObject -Property @{
		Runspace = $PowerShell.BeginInvoke()
		PowerShell = $PowerShell  
	} #/New-Object
} #/ForEach

# Now we need to wait for everything to finish running, and when it does go collect our results and cleanup our run spaces
# We just say that so long as we have anything in our RunspacePool to keep doing work. This works since we clean up each runspace as it completes.
While($RunspaceCollection) {
	
	# Just a simple ForEach loop for each Runspace to get resolved
	Foreach ($Runspace in $RunspaceCollection.ToArray()) {
		
		# Here's where we actually check if the Runspace has completed
		If ($Runspace.Runspace.IsCompleted) {
			
			# Since it's completed, we get our results here
			[void]$qwinstaResults.Add($Runspace.PowerShell.EndInvoke($Runspace.Runspace))
			
			# Here's where we cleanup our Runspace
			$Runspace.PowerShell.Dispose()
			$RunspaceCollection.Remove($Runspace)
			
		} #/If
	} #/ForEach
} #/While


$qwinstaResults.ForEach({ [pscustomobject]$_ })  | Export-Csv -Path 'C:\User\Chris.csv'  
#$qwinstaResults | Format-Table -AutoSize



## Execution Time
   $ET = New-TimeSpan -Start $ET_Start -end (Get-Date) ## .ExitTime in .NET 4.5 & 4.6
## Execution Time Summary
   $ETS=""
   if($ET.Days -gt 0){$ETS+=""+$ET.Days+"d,"}else{$ETS+="-d,"} ; if($ET.Hours -gt 0){$ETS+=""+$ET.Hours+"h,"}else{$ETS+="-h,"} ; if($ET.Minutes -gt 0){$ETS+=""+$ET.Minutes+"m,"}else{$ETS+="-m,"} ; if($ET.Seconds -gt 0){$ETS+=""+$ET.Seconds+"s,"}else{$ETS+="-s,"} ; if($ET.MilliSeconds -gt 0){$ETS+=""+$ET.MilliSeconds+"ms"}else{$ETS+="-ms"}
   $ETSts = [Math]::Ceiling([decimal]($ET.TotalSeconds))
## Execution Time Summary
   $M="YOUR_FUNCTION_NAME: Took $ETSts secs ($ETS)." ; Write-Host -f green $M 



